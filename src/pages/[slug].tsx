import Head from "next/head";

import type { NextPage } from "next";
import { api } from "@/utils/api";

const PageView: NextPage<{ username: string }> = ({ username }) => {
  console.log(username);
  const { data } = api.profile.getUserByUsername.useQuery({
    username,
  });
  console.log(username);

  if (!data) return <div>404</div>;
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex justify-center text-slate-100">
        <div>testing</div>
      </main>
    </>
  );
};
import superjson from "superjson";
import { appRouter } from "@/server/api/root";
import { prisma } from "@/server/db";
import type { GetStaticProps } from "next";
import { createServerSideHelpers } from "@trpc/react-query/server";

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, userId: null },
    transformer: superjson, // optional - adds superjson serialization
  });

  const slug = context.params?.slug;

  if (typeof slug !== "string") throw new Error("slug is not a string");

  const username = slug.replace("@", "");

  await ssg.profile.getUserByUsername.prefetch({ username });

  return {
    props: {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      trpcState: JSON.parse(JSON.stringify(ssg.dehydrate())),
      username,
    },
  };
};

export const getStaticPaths = () => {
  return { paths: [], fallback: "blocking" };
};

export default PageView;
